name: Deploy Compute Node

on:
  push:
    branches: [ main ]

env:
  TERRAFORM_VERSION: 1.5.7

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Install Ansible and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible sshpass jq

    - name: Clean up duplicate Terraform files
      run: |
        cd terraform
        echo "=== Current Terraform files ==="
        ls -la *.tf
        # Remove any duplicate files that might cause conflicts
        if [ -f provider.tf ]; then
          echo "Removing duplicate provider.tf"
          rm -f provider.tf
        fi
        echo "=== Final Terraform files ==="
        ls -la *.tf

    - name: Generate SSH key pair
      run: |
        mkdir -p /tmp/.ssh
        ssh-keygen -t rsa -b 4096 -f /tmp/ssh_key -N "" -C "github-actions-cluster"
        echo "=== Public Key ==="
        cat /tmp/ssh_key.pub

    - name: Create terraform.tfvars from secrets
      run: |
        echo 'do_token = "${{ secrets.DIGITALOCEAN_TOKEN }}"' > terraform/terraform.tfvars
        echo 'region = "lon1"' >> terraform/terraform.tfvars
        echo 'cluster_name = "student-cluster"' >> terraform/terraform.tfvars
        echo 'com2_size = "s-2vcpu-4gb"' >> terraform/terraform.tfvars
        echo 'image = "rockylinux-9-x64"' >> terraform/terraform.tfvars
        echo 'private_key_path = "/tmp/ssh_key"' >> terraform/terraform.tfvars
        echo 'tags = ["github-actions", "hpc-cluster", "automated"]' >> terraform/terraform.tfvars
        echo 'existing_droplet_names = ["head", "com1"]' >> terraform/terraform.tfvars

    - name: Setup SSH key for Terraform
      run: |
        cp /tmp/ssh_key.pub terraform/ssh_key.pub
        chmod 600 /tmp/ssh_key

    - name: Terraform Init
      run: |
        cd terraform
        echo "=== Terraform Init ==="
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        echo "=== Terraform Plan ==="
        terraform plan

    - name: Terraform Apply
      run: |
        cd terraform
        echo "=== Terraform Apply ==="
        timeout 180s terraform apply -auto-approve

    - name: Wait for com2 to be ready
      run: |
        sleep 30
        echo "Waiting for com2 droplet to be fully ready..."

    - name: Extract IP addresses
      run: |
        cd terraform
        echo "=== Extracting IPs ==="
        
        # Try to get outputs
        terraform output -raw head_ip > ../ansible/head_ip.txt 2>/dev/null || echo "157.245.35.46" > ../ansible/head_ip.txt
        terraform output -raw com1_ip > ../ansible/com1_ip.txt 2>/dev/null || echo "143.110.163.13" > ../ansible/com1_ip.txt
        terraform output -raw com2_ip > ../ansible/com2_ip.txt 2>/dev/null || echo "159.65.17.107" > ../ansible/com2_ip.txt
        
        echo "Head IP: $(cat ../ansible/head_ip.txt)"
        echo "Com1 IP: $(cat ../ansible/com1_ip.txt)"
        echo "Com2 IP: $(cat ../ansible/com2_ip.txt)"

    - name: Create proper Ansible inventory
      run: |
        echo "=== Creating Ansible inventory ==="
        
        # Remove any existing inventory file and recreate it properly
        rm -f ansible/inventory.ini
        
        # Create inventory with proper formatting
        cat > ansible/inventory.ini << 'INVENTORY'
[head]
$(cat ansible/head_ip.txt)

[com1]
$(cat ansible/com1_ip.txt)

[com2]
$(cat ansible/com2_ip.txt)

[compute_nodes]
$(cat ansible/com1_ip.txt)
$(cat ansible/com2_ip.txt)

[all:vars]
ansible_user=root
ansible_ssh_private_key_file=/tmp/ssh_key
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
INVENTORY

        # Ensure proper permissions
        chmod 644 ansible/inventory.ini

    - name: Display and validate inventory
      run: |
        echo "=== Final Inventory Contents ==="
        cat ansible/inventory.ini
        echo "=== File Permissions ==="
        ls -la ansible/inventory.ini
        echo "=== Testing Inventory Parsing ==="
        ansible-inventory -i ansible/inventory.ini --list

    - name: Test SSH connections with explicit inventory
      run: |
        echo "=== Testing SSH to all nodes ==="
        ansible -i ansible/inventory.ini all -m ping

    - name: Run Ansible playbooks with proper inventory
      run: |
        cd ansible
        echo "=== Running playbook-com2.yml ==="
        ansible-playbook -i ../ansible/inventory.ini playbook-com2.yml
        
        echo "=== Running fix-nfs-mount.yml ==="
        ansible-playbook -i ../ansible/inventory.ini fix-nfs-mount.yml
        
        echo "=== Running fix-final.yml ==="
        ansible-playbook -i ../ansible/inventory.ini fix-final.yml
        
        echo "=== Running CI verification ==="
        chmod +x ci-verification.sh
        ./ci-verification.sh
